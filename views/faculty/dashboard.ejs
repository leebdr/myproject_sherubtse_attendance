<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %> - Sherubtse College</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
  <link rel="stylesheet" href="/css/style.css">
</head>
<body>
  <%- include('../partials/faculty-header', { active: 'dashboard' }) %>

  <main class="container py-4">
    <% if (locals.success_msg) { %>
      <div class="alert alert-success" role="alert">
        <%= success_msg %>
      </div>
    <% } %>
    
    <% if (locals.error_msg) { %>
      <div class="alert alert-danger" role="alert">
        <%= error_msg %>
      </div>
    <% } %>

    <div class="row mb-4">
      <div class="col-md-8">
        <div class="card">
          <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Faculty Dashboard</h5>
            <span class="badge bg-primary">Faculty</span>
          </div>
          <div class="card-body">
            <p>Welcome, <%= user.name %>!</p>
            <p>Use the tabs below to generate QR codes for attendance or view attendance records.</p>
          </div>
        </div>
      </div>
      <div class="col-md-4">
        <div class="card">
          <div class="card-header">
            <h5 class="mb-0">Quick Actions</h5>
          </div>
          <div class="card-body">
            <div class="d-grid gap-2">
              <a href="/faculty/settings" class="btn btn-outline-primary">
                <i class="bi bi-gear-fill me-2"></i> Settings
              </a>
              <a href="/logout" class="btn btn-outline-danger">
                <i class="bi bi-box-arrow-right me-2"></i> Logout
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>

    <ul class="nav nav-tabs mb-4" id="myTab" role="tablist">
      <li class="nav-item" role="presentation">
        <button class="nav-link active" id="generate-tab" data-bs-toggle="tab" data-bs-target="#generate" type="button" role="tab" aria-controls="generate" aria-selected="true">Generate QR Code</button>
      </li>
      <li class="nav-item" role="presentation">
        <button class="nav-link" id="attendance-tab" data-bs-toggle="tab" data-bs-target="#attendance" type="button" role="tab" aria-controls="attendance" aria-selected="false">View Attendance</button>
      </li>
      <li class="nav-item" role="presentation">
        <button class="nav-link" id="courses-tab" data-bs-toggle="tab" data-bs-target="#courses" type="button" role="tab" aria-controls="courses" aria-selected="false">My Courses</button>
      </li>
    </ul>

    <div class="tab-content" id="myTabContent">
      <!-- Generate QR Tab -->
      <div class="tab-pane fade show active" id="generate" role="tabpanel" aria-labelledby="generate-tab">
        <div class="row">
          <div class="col-md-8">
            <div class="card">
              <div class="card-header">
                <h5 class="mb-0">Generate Attendance QR Code</h5>
              </div>
              <div class="card-body">
                <div id="qr-form-container">
                  <form id="qr-form" class="mb-4">
                    <div class="mb-3">
                      <label for="courseId" class="form-label">Course ID</label>
                      <input type="text" class="form-control" id="courseId" name="courseId" placeholder="e.g. CSC101" required>
                    </div>
                    
                    <div class="mb-3">
                      <label for="courseName" class="form-label">Course Name</label>
                      <input type="text" class="form-control" id="courseName" name="courseName" placeholder="e.g. Introduction to Computer Science" required>
                    </div>
                    
                    <div class="row mb-3">
                      <div class="col-md-6">
                        <label for="sessionDate" class="form-label">
                          <i class="bi bi-calendar-date me-1"></i> Session Date
                        </label>
                        <input type="date" class="form-control" id="sessionDate" required>
                      </div>
                      <div class="col-md-6">
                        <label for="dayOfWeek" class="form-label">Day of Week</label>
                        <input type="text" class="form-control bg-light" id="dayOfWeek" readonly>
                      </div>
                    </div>
                    
                    <div class="row mb-3">
                      <div class="col-md-6">
                        <label for="startTime" class="form-label">
                          <i class="bi bi-clock me-1"></i> Start Time
                        </label>
                        <input type="time" class="form-control" id="startTime" required>
                      </div>
                      <div class="col-md-6">
                        <label for="endTime" class="form-label">
                          <i class="bi bi-clock-history me-1"></i> End Time
                        </label>
                        <input type="time" class="form-control" id="endTime" required>
                      </div>
                    </div>
                    
                    <div class="mb-3">
                      <label for="duration" class="form-label">Session Duration</label>
                      <select class="form-select" id="duration" required>
                        <option value="15">15 minutes</option>
                        <option value="30">30 minutes</option>
                        <option value="45">45 minutes</option>
                        <option value="60" selected>60 minutes</option>
                        <option value="90">90 minutes</option>
                        <option value="120">120 minutes</option>
                      </select>
                    </div>
                    
                    <button type="submit" class="btn btn-primary" id="generate-btn">Generate QR Code</button>
                  </form>
                </div>
                
                <div id="qr-result" class="text-center d-none">
                  <div class="mb-3">
                    <img id="qr-image" class="img-fluid border p-2 bg-white" style="max-width: 300px;">
                  </div>
                  
                  <div class="mb-3">
                    <p class="text-muted">This QR code will expire in <span id="expiry-time"></span> minutes.</p>
                    <p class="text-muted">Have students scan it to mark their attendance.</p>
                  </div>
                  
                  <div>
                    <button id="print-btn" class="btn btn-outline-secondary me-2">Print QR Code</button>
                    <button id="new-qr-btn" class="btn btn-primary">Generate New QR Code</button>
                  </div>
                </div>
                
                <div id="qr-loading" class="text-center d-none">
                  <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                  </div>
                  <p>Generating QR code...</p>
                </div>
                
                <div id="qr-error" class="alert alert-danger d-none" role="alert"></div>
              </div>
            </div>
          </div>
          
          <div class="col-md-4">
            <div class="card">
              <div class="card-header">
                <h5 class="mb-0">Instructions</h5>
              </div>
              <div class="card-body">
                <ol>
                  <li>Enter the course ID and course name for which you want to take attendance.</li>
                  <li>Select the session date and time details.</li>
                  <li>Choose the session duration (how long the QR code will be valid).</li>
                  <li>Click "Generate QR Code".</li>
                  <li>Display the QR code to your students.</li>
                  <li>Students will scan the QR code to mark their attendance.</li>
                </ol>
                <div class="alert alert-info">
                  <small>The QR code contains location data, so students must be physically present in the classroom to mark attendance.</small>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- View Attendance Tab -->
      <div class="tab-pane fade" id="attendance" role="tabpanel" aria-labelledby="attendance-tab">
        <div class="card">
          <div class="card-header">
            <h5 class="mb-0">Attendance Records</h5>
          </div>
          <div class="card-body">
            <div class="mb-3">
              <label for="attendance-course" class="form-label">Select Course</label>
              <select class="form-select" id="attendance-course">
                <option value="">Select a course</option>
                <!-- Will be populated via JavaScript -->
              </select>
            </div>
            
            <div class="mb-3">
              <div class="row">
                <div class="col-md-4">
                  <label for="filter-department" class="form-label">Filter by Department</label>
                  <select class="form-select" id="filter-department">
                    <option value="">All Departments</option>
                    <!-- Will be populated via JavaScript -->
                  </select>
                </div>
                <div class="col-md-4">
                  <label for="filter-course" class="form-label">Filter by Course</label>
                  <select class="form-select" id="filter-course">
                    <option value="">All Courses</option>
                    <!-- Will be populated via JavaScript -->
                  </select>
                </div>
                <div class="col-md-4">
                  <label for="filter-hostel" class="form-label">Filter by Hostel</label>
                  <select class="form-select" id="filter-hostel">
                    <option value="">All Hostels</option>
                    <!-- Will be populated via JavaScript -->
                  </select>
                </div>
                <div class="col-12 mt-2 text-end">
                  <button class="btn btn-sm btn-outline-secondary" id="reset-filters">Reset Filters</button>
                </div>
              </div>
            </div>
            
            <div id="attendance-records" class="mt-4">
              <div class="alert alert-info">
                Please select a course to view attendance records.
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- My Courses Tab -->
      <div class="tab-pane fade" id="courses" role="tabpanel" aria-labelledby="courses-tab">
        <div class="card">
          <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">My Courses</h5>
            <button class="btn btn-sm btn-outline-primary" id="refresh-courses">
              <i class="bi bi-arrow-clockwise"></i> Refresh
            </button>
          </div>
          <div class="card-body">
            <div id="courses-container">
              <div class="text-center py-4">
                <div class="spinner-border text-primary" role="status">
                  <span class="visually-hidden">Loading...</span>
                </div>
                <p>Loading courses...</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

  <%- include('../partials/footer') %>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Elements
      const courseIdInput = document.getElementById('courseId');
      const courseNameInput = document.getElementById('courseName');
      const sessionDateInput = document.getElementById('sessionDate');
      const dayOfWeekInput = document.getElementById('dayOfWeek');
      const startTimeInput = document.getElementById('startTime');
      const endTimeInput = document.getElementById('endTime');
      const attendanceCourseSelect = document.getElementById('attendance-course');
      const qrForm = document.getElementById('qr-form');
      const qrFormContainer = document.getElementById('qr-form-container');
      const qrResult = document.getElementById('qr-result');
      const qrLoading = document.getElementById('qr-loading');
      const qrError = document.getElementById('qr-error');
      const qrImage = document.getElementById('qr-image');
      const expiryTime = document.getElementById('expiry-time');
      const printBtn = document.getElementById('print-btn');
      const newQrBtn = document.getElementById('new-qr-btn');
      const attendanceRecords = document.getElementById('attendance-records');
      const filterDepartment = document.getElementById('filter-department');
      const filterCourse = document.getElementById('filter-course');
      const filterHostel = document.getElementById('filter-hostel');
      const resetFiltersBtn = document.getElementById('reset-filters');
      const coursesContainer = document.getElementById('courses-container');
      const refreshCoursesBtn = document.getElementById('refresh-courses');
      
      // Set default date and time values
      const now = new Date();
      sessionDateInput.value = now.toISOString().split('T')[0];
      startTimeInput.value = now.toTimeString().slice(0, 5);
      
      // Calculate default end time (current time + 1 hour)
      const endTimeDate = new Date(now.getTime() + 60 * 60 * 1000);
      endTimeInput.value = endTimeDate.toTimeString().slice(0, 5);
      
      // Set day of week
      const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      dayOfWeekInput.value = days[now.getDay()];
      
      // Update day of week when date changes
      sessionDateInput.addEventListener('change', function() {
        const selectedDate = new Date(this.value);
        dayOfWeekInput.value = days[selectedDate.getDay()];
      });
      
      // Faculty courses storage
      let facultyCourses = [];
      
      // Load faculty courses from localStorage
      function loadFacultyCourses() {
        const storedCourses = localStorage.getItem('facultyCourses');
        if (storedCourses) {
          try {
            facultyCourses = JSON.parse(storedCourses);
          } catch (e) {
            console.error('Error parsing stored courses:', e);
            facultyCourses = [];
          }
        }
        
        // Update UI
        updateCoursesUI();
        updateAttendanceCourseSelect();
      }
      
      // Save faculty courses to localStorage
      function saveFacultyCourses() {
        localStorage.setItem('facultyCourses', JSON.stringify(facultyCourses));
      }
      
      // Add a course to faculty courses
      function addFacultyCourse(courseId, courseName) {
        // Check if course already exists
        const existingCourse = facultyCourses.find(course => course.id === courseId);
        if (existingCourse) {
          // Update existing course
          existingCourse.name = courseName;
          existingCourse.lastUsed = new Date().toISOString();
        } else {
          // Add new course
          facultyCourses.push({
            id: courseId,
            name: courseName,
            created: new Date().toISOString(),
            lastUsed: new Date().toISOString(),
            sessions: 1
          });
        }
        
        // Save and update UI
        saveFacultyCourses();
        updateCoursesUI();
        updateAttendanceCourseSelect();
      }
      
      // Update courses UI
      function updateCoursesUI() {
        if (facultyCourses.length === 0) {
          coursesContainer.innerHTML = `
            <div class="alert alert-info">
              <i class="bi bi-info-circle me-2"></i> You haven't created any courses yet. 
              Generate a QR code for a course to add it to your list.
            </div>
          `;
          return;
        }
        
        // Sort courses by last used date (most recent first)
        const sortedCourses = [...facultyCourses].sort((a, b) => 
          new Date(b.lastUsed).getTime() - new Date(a.lastUsed).getTime()
        );
        
        let html = `
          <div class="table-responsive">
            <table class="table table-hover">
              <thead>
                <tr>
                  <th>Course ID</th>
                  <th>Course Name</th>
                  <th>Sessions</th>
                  <th>Last Used</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
        `;
        
        sortedCourses.forEach(course => {
          const lastUsedDate = new Date(course.lastUsed);
          const formattedDate = lastUsedDate.toLocaleDateString() + ' ' + 
                               lastUsedDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
          
          html += `
            <tr>
              <td>${course.id}</td>
              <td>${course.name}</td>
              <td>${course.sessions || 1}</td>
              <td>${formattedDate}</td>
              <td>
                <button class="btn btn-sm btn-primary generate-qr-btn" data-course-id="${course.id}" data-course-name="${course.name}">
                  <i class="bi bi-qr-code me-1"></i> Generate QR
                </button>
                <button class="btn btn-sm btn-outline-secondary view-attendance-btn ms-1" data-course-id="${course.id}">
                  <i class="bi bi-list-check me-1"></i> View Attendance
                </button>
              </td>
            </tr>
          `;
        });
        
        html += `
              </tbody>
            </table>
          </div>
        `;
        
        coursesContainer.innerHTML = html;
        
        // Add event listeners to buttons
        document.querySelectorAll('.generate-qr-btn').forEach(btn => {
          btn.addEventListener('click', function() {
            const courseId = this.getAttribute('data-course-id');
            const courseName = this.getAttribute('data-course-name');
            
            // Switch to generate tab
            document.getElementById('generate-tab').click();
            
            // Fill form
            courseIdInput.value = courseId;
            courseNameInput.value = courseName;
            
            // Update course usage
            const course = facultyCourses.find(c => c.id === courseId);
            if (course) {
              course.lastUsed = new Date().toISOString();
              course.sessions = (course.sessions || 1) + 1;
              saveFacultyCourses();
            }
          });
        });
        
        document.querySelectorAll('.view-attendance-btn').forEach(btn => {
          btn.addEventListener('click', function() {
            const courseId = this.getAttribute('data-course-id');
            
            // Switch to attendance tab
            document.getElementById('attendance-tab').click();
            
            // Select course
            attendanceCourseSelect.value = courseId;
            
            // Trigger change event
            const event = new Event('change');
            attendanceCourseSelect.dispatchEvent(event);
          });
        });
      }
      
      // Update attendance course select
      function updateAttendanceCourseSelect() {
        let options = '<option value="">Select a course</option>';
        
        facultyCourses.forEach(course => {
          options += `<option value="${course.id}">${course.id} - ${course.name}</option>`;
        });
        
        attendanceCourseSelect.innerHTML = options;
      }
      
      // Mock data for attendance records
      let mockAttendanceData = [];
      
      // Generate QR code
      qrForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const courseId = courseIdInput.value;
        const courseName = courseNameInput.value;
        const sessionDate = sessionDateInput.value;
        const dayOfWeek = dayOfWeekInput.value;
        const startTime = startTimeInput.value;
        const endTime = endTimeInput.value;
        const duration = document.getElementById('duration').value;
        
        if (!courseId || !courseName) {
          qrError.textContent = 'Please enter course ID and name';
          qrError.classList.remove('d-none');
          return;
        }
        
        if (!sessionDate) {
          qrError.textContent = 'Please select a session date';
          qrError.classList.remove('d-none');
          return;
        }
        
        if (!startTime || !endTime) {
          qrError.textContent = 'Please select start and end times';
          qrError.classList.remove('d-none');
          return;
        }
        
        // Show loading
        qrFormContainer.classList.add('d-none');
        qrLoading.classList.remove('d-none');
        qrError.classList.add('d-none');
        
        // Get location
        navigator.geolocation.getCurrentPosition(
          position => {
            // In a real implementation, this would call your API
            // For this demo, we'll simulate an API call
            setTimeout(() => {
              // Parse date components
              const dateObj = new Date(sessionDate);
              const year = dateObj.getFullYear();
              const month = dateObj.getMonth() + 1; // JavaScript months are 0-indexed
              const day = dateObj.getDate();
              
              generateQRCode(
                courseId, 
                courseName, 
                duration, 
                position.coords.latitude, 
                position.coords.longitude,
                {
                  date: sessionDate,
                  dayOfWeek,
                  startTime,
                  endTime,
                  day,
                  month,
                  year
                }
              );
              
              // Add course to faculty courses
              addFacultyCourse(courseId, courseName);
            }, 1500);
          },
          error => {
            console.error('Geolocation error:', error);
            qrLoading.classList.add('d-none');
            qrFormContainer.classList.remove('d-none');
            qrError.textContent = 'Could not access your location. Please enable location services.';
            qrError.classList.remove('d-none');
          }
        );
      });
      
      // Generate QR code (mock implementation)
      function generateQRCode(courseId, courseName, duration, latitude, longitude, sessionDetails) {
        try {
          // In a real implementation, this would call your API
          // For this example, we'll use a placeholder QR code
          
          // Set QR image (placeholder)
          qrImage.src = `https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${encodeURIComponent(
            JSON.stringify({
              sessionId: 'session_' + Date.now(),
              courseId,
              courseName,
              facultyName: '<%= user.name %>',
              timestamp: new Date().toISOString(),
              location: { latitude, longitude },
              expiresAt: new Date(Date.now() + duration * 60 * 1000).toISOString(),
              sessionDetails
            })
          )}`;
          
          // Set expiry time
          expiryTime.textContent = duration;
          
          // Show result
          qrLoading.classList.add('d-none');
          qrResult.classList.remove('d-none');
        } catch (err) {
          console.error('Error generating QR code:', err);
          qrLoading.classList.add('d-none');
          qrFormContainer.classList.remove('d-none');
          qrError.textContent = 'An error occurred while generating the QR code. Please try again.';
          qrError.classList.remove('d-none');
        }
      }
      
      // Print QR code
      printBtn.addEventListener('click', function() {
        window.print();
      });
      
      // Generate new QR code
      newQrBtn.addEventListener('click', function() {
        qrResult.classList.add('d-none');
        qrFormContainer.classList.remove('d-none');
      });
      
      // Load filter options
      function loadFilterOptions() {
        // Department options
        const departments = ['DOAH', 'DOSS', 'DOELS', 'DOPS', 'DOMS', 'NEW', 'FIRST'];
        let departmentOptions = '<option value="">All Departments</option>';
        departments.forEach(dept => {
          departmentOptions += `<option value="${dept}">${dept}</option>`;
        });
        filterDepartment.innerHTML = departmentOptions;
        
        // Course options
        const courses = [
          'BA in Dzongkha & English',
          'BA in English',
          'BA in History',
          'BSc in Mathematics',
          'BSc in Physics',
          'BSc in Chemistry'
        ];
        let courseOptions = '<option value="">All Courses</option>';
        courses.forEach(course => {
          courseOptions += `<option value="${course}">${course}</option>`;
        });
        filterCourse.innerHTML = courseOptions;
        
        // Hostel options
        const hostels = [
          'Thubtenling', 'Minjurling', 'Yentenling', 'Rabtaling',
          'Pemaling', 'Gatsheling', 'Gakiling', 'Yetsholing'
        ];
        let hostelOptions = '<option value="">All Hostels</option>';
        hostels.forEach(hostel => {
          hostelOptions += `<option value="${hostel}">${hostel}</option>`;
        });
        filterHostel.innerHTML = hostelOptions;
      }
      
      // Generate mock attendance data
      function generateMockAttendanceData() {
        const departments = ['DOAH', 'DOSS', 'DOELS', 'DOPS', 'DOMS', 'NEW', 'FIRST'];
        const courses = [
          'BA in Dzongkha & English',
          'BA in English',
          'BA in History',
          'BSc in Mathematics',
          'BSc in Physics',
          'BSc in Chemistry'
        ];
        const hostels = [
          'Thubtenling', 'Minjurling', 'Yentenling', 'Rabtaling',
          'Pemaling', 'Gatsheling', 'Gakiling', 'Yetsholing'
        ];
        const statuses = ['Present', 'Absent'];
        const genders = ['Male', 'Female'];
        const years = ['1', '2', '3', '4'];
        
        // Generate 50 random records
        const records = [];
        for (let i = 1; i <= 50; i++) {
          const dept = departments[Math.floor(Math.random() * departments.length)];
          const course = courses[Math.floor(Math.random() * courses.length)];
          const hostel = hostels[Math.floor(Math.random() * hostels.length)];
          const status = statuses[Math.floor(Math.random() * statuses.length)];
          const gender = genders[Math.floor(Math.random() * genders.length)];
          const year = years[Math.floor(Math.random() * years.length)];
          
          records.push({
            id: i,
            studentId: '1000' + i,
            studentName: `Student ${i}`,
            date: '2023-05-01',
            time: `${Math.floor(Math.random() * 12) + 1}:${Math.floor(Math.random() * 60).toString().padStart(2, '0')} ${Math.random() > 0.5 ? 'AM' : 'PM'}`,
            status: status,
            department: dept,
            course: course,
            hostel: hostel,
            gender: gender,
            year: year
          });
        }
        
        return records;
      }
      
      // Filter attendance records
      function filterAttendanceRecords(records, filters) {
        return records.filter(record => {
          // Check department filter
          if (filters.department && record.department !== filters.department) {
            return false;
          }
          
          // Check course filter
          if (filters.course && record.course !== filters.course) {
            return false;
          }
          
          // Check hostel filter
          if (filters.hostel && record.hostel !== filters.hostel) {
            return false;
          }
          
          return true;
        });
      }
      
      // Render attendance records table
      function renderAttendanceTable(records) {
        if (records.length === 0) {
          attendanceRecords.innerHTML = `
            <div class="alert alert-warning">
              <i class="bi bi-exclamation-triangle me-2"></i> No attendance records found matching the selected filters.
            </div>
          `;
          return;
        }
        
        let html = `
          <div class="table-responsive">
            <table class="table table-striped">
              <thead>
                <tr>
                  <th>Student ID</th>
                  <th>Name</th>
                  <th>Department</th>
                  <th>Course</th>
                  <th>Year</th>
                  <th>Hostel</th>
                  <th>Date</th>
                  <th>Time</th>
                  <th>Status</th>
                </tr>
              </thead>
              <tbody>
        `;
        
        records.forEach(record => {
          html += `
            <tr>
              <td>${record.studentId}</td>
              <td>${record.studentName}</td>
              <td>${record.department}</td>
              <td>${record.course}</td>
              <td>${record.year}</td>
              <td>${record.hostel}</td>
              <td>${record.date}</td>
              <td>${record.time}</td>
              <td>
                <span class="badge ${record.status === 'Present' ? 'bg-success' : 'bg-danger'}">
                  ${record.status}
                </span>
              </td>
            </tr>
          `;
        });
        
        html += `
              </tbody>
            </table>
          </div>
          
          <div class="mt-3 d-flex justify-content-between align-items-center">
            <div>
              <span class="text-muted">Showing ${records.length} of ${mockAttendanceData.length} records</span>
            </div>
            <div>
              <button class="btn btn-outline-secondary me-2" id="export-csv">
                <i class="bi bi-file-earmark-excel me-1"></i> Export to CSV
              </button>
              <button class="btn btn-outline-secondary" id="print-attendance" onclick="window.print()">
                <i class="bi bi-printer me-1"></i> Print
              </button>
            </div>
          </div>
        `;
        
        attendanceRecords.innerHTML = html;
        
        // Add event listener to export button
        document.getElementById('export-csv').addEventListener('click', function() {
          exportToCSV(records);
        });
      }
      
      // Export to CSV function
      function exportToCSV(records) {
        // Create CSV content
        let csvContent = "data:text/csv;charset=utf-8,";
        
        // Add headers
        csvContent += "Student ID,Name,Department,Course,Year,Hostel,Date,Time,Status\n";
        
        // Add records
        records.forEach(record => {
          csvContent += `${record.studentId},${record.studentName},${record.department},${record.course},${record.year},${record.hostel},${record.date},${record.time},${record.status}\n`;
        });
        
        // Create download link
        const encodedUri = encodeURI(csvContent);
        const link = document.createElement("a");
        link.setAttribute("href", encodedUri);
        link.setAttribute("download", "attendance_report.csv");
        document.body.appendChild(link);
        
        // Trigger download
        link.click();
        
        // Clean up
        document.body.removeChild(link);
      }
      
      // Load attendance records
      attendanceCourseSelect.addEventListener('change', function() {
        const courseId = this.value;
        
        if (!courseId) {
          attendanceRecords.innerHTML = `
            <div class="alert alert-info">
              <i class="bi bi-info-circle me-2"></i> Please select a course to view attendance records.
            </div>
          `;
          return;
        }
        
        // Show loading
        attendanceRecords.innerHTML = `
          <div class="text-center py-4">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <p>Loading attendance records...</p>
          </div>
        `;
        
        // Generate mock data if not already generated
        if (mockAttendanceData.length === 0) {
          mockAttendanceData = generateMockAttendanceData();
        }
        
        // Simulate API call delay
        setTimeout(() => {
          // Apply current filters
          const filters = {
            department: filterDepartment.value,
            course: filterCourse.value,
            hostel: filterHostel.value
          };
          
          const filteredRecords = filterAttendanceRecords(mockAttendanceData, filters);
          renderAttendanceTable(filteredRecords);
        }, 1000);
      });
      
      // Apply filters
      function applyFilters() {
        const filters = {
          department: filterDepartment.value,
          course: filterCourse.value,
          hostel: filterHostel.value
        };
        
        // Only apply filters if a course is selected
        if (attendanceCourseSelect.value) {
          // Show loading
          attendanceRecords.innerHTML = `
            <div class="text-center py-3">
              <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
              </div>
              <p>Filtering records...</p>
            </div>
          `;
          
          // Simulate API call delay
          setTimeout(() => {
            const filteredRecords = filterAttendanceRecords(mockAttendanceData, filters);
            renderAttendanceTable(filteredRecords);
          }, 500);
        }
      }
      
      // Add event listeners for filters
      filterDepartment.addEventListener('change', applyFilters);
      filterCourse.addEventListener('change', applyFilters);
      filterHostel.addEventListener('change', applyFilters);
      
      // Reset filters
      resetFiltersBtn.addEventListener('click', function() {
        filterDepartment.value = '';
        filterCourse.value = '';
        filterHostel.value = '';
        applyFilters();
      });
      
      // Refresh courses
      refreshCoursesBtn.addEventListener('click', function() {
        // Show loading
        coursesContainer.innerHTML = `
          <div class="text-center py-4">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <p>Refreshing courses...</p>
          </div>
        `;
        
        // Simulate API call delay
        setTimeout(() => {
          updateCoursesUI();
        }, 800);
      });
      
      // Initialize
      loadFilterOptions();
      loadFacultyCourses();
    });
  </script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
