<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Face Registration - Sherubtse College</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="/css/style.css">
  <!-- Regula SDK would be included here in a real implementation -->
  <!-- <script src="/regula/regula.js"></script> -->
</head>
<body class="bg-light">
  <div class="container">
    <div class="row justify-content-center mt-5">
      <div class="col-md-6">
        <div class="card shadow-sm">
          <div class="card-body p-5">
            <div class="text-center mb-4">
              <img src="/img/logo.png" alt="Sherubtse College Logo" width="80" height="80">
              <h2 class="mt-3">Face Registration</h2>
              <p class="text-muted">We need to capture your face for identity verification</p>
            </div>

            <% if (locals.error_msg) { %>
              <div class="alert alert-danger" role="alert">
                <%= error_msg %>
              </div>
            <% } %>

            <div id="regula-container" class="mb-4">
              <div id="camera-container" class="ratio ratio-4x3 bg-dark rounded mb-3">
                <video id="video" autoplay playsinline class="rounded"></video>
              </div>
              
              <div id="captured-container" class="ratio ratio-4x3 bg-dark rounded mb-3 d-none">
                <img id="captured-image" class="rounded object-fit-contain" alt="Captured face">
              </div>
              
              <canvas id="canvas" class="d-none"></canvas>
              
              <div class="d-flex justify-content-center">
                <button id="capture-btn" class="btn btn-primary me-2">Capture</button>
                <button id="retake-btn" class="btn btn-outline-secondary me-2 d-none">Retake</button>
                <button id="submit-btn" class="btn btn-success d-none">Continue</button>
              </div>
            </div>
            
            <form id="face-form" action="/register-face" method="POST" class="d-none">
              <input type="hidden" id="face-image" name="faceImage">
            </form>
            
            <div class="alert alert-info" role="alert">
              <small>Your facial data will be securely stored and only used for attendance verification purposes.</small>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const video = document.getElementById('video');
      const canvas = document.getElementById('canvas');
      const captureBtn = document.getElementById('capture-btn');
      const retakeBtn = document.getElementById('retake-btn');
      const submitBtn = document.getElementById('submit-btn');
      const capturedImage = document.getElementById('captured-image');
      const faceImageInput = document.getElementById('face-image');
      const cameraContainer = document.getElementById('camera-container');
      const capturedContainer = document.getElementById('captured-container');
      const faceForm = document.getElementById('face-form');
      
      let stream;
      
      // Start camera
      async function startCamera() {
        try {
          stream = await navigator.mediaDevices.getUserMedia({
            video: {
              facingMode: 'user',
              width: { ideal: 640 },
              height: { ideal: 480 }
            }
          });
          
          video.srcObject = stream;
          cameraContainer.classList.remove('d-none');
          capturedContainer.classList.add('d-none');
          captureBtn.classList.remove('d-none');
          retakeBtn.classList.add('d-none');
          submitBtn.classList.add('d-none');
        } catch (err) {
          console.error('Error accessing camera:', err);
          alert('Could not access camera. Please ensure camera permissions are granted.');
        }
      }
      
      // Stop camera
      function stopCamera() {
        if (stream) {
          stream.getTracks().forEach(track => track.stop());
          video.srcObject = null;
        }
      }
      
      // Capture image
      function captureImage() {
        const context = canvas.getContext('2d');
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        context.drawImage(video, 0, 0, canvas.width, canvas.height);
        
        const imageDataUrl = canvas.toDataURL('image/jpeg');
        capturedImage.src = imageDataUrl;
        faceImageInput.value = imageDataUrl;
        
        cameraContainer.classList.add('d-none');
        capturedContainer.classList.remove('d-none');
        captureBtn.classList.add('d-none');
        retakeBtn.classList.remove('d-none');
        submitBtn.classList.remove('d-none');
        
        stopCamera();
      }
      
      // Event listeners
      captureBtn.addEventListener('click', captureImage);
      
      retakeBtn.addEventListener('click', startCamera);
      
      submitBtn.addEventListener('click', function() {
        faceForm.submit();
      });
      
      // Initialize
      startCamera();
      
      // Clean up on page unload
      window.addEventListener('beforeunload', stopCamera);
    });
  </script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
